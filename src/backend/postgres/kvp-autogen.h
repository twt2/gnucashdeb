
/* DO NOT EDIT THIS FILE -- it is autogenerated -- edit table.m4 instead */





/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPint64Only (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPdoubleOnly (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPnumericOnly (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPstringOnly (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPguidOnly (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores/updates one record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in.
 */
void 
pgendStoreOneKVPtimespecOnly (PGBackend *be,
                                    store_data_t *ptr,
                                    sqlBuild_QType update);


/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPint64 (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPdouble (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPnumeric (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPstring (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPguid (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);

/* ------------------------------------------------------ */
/* This routine stores one autdit record in the database.
 * It does not do any traversals, it does not lock.  
 * It just pokes the data in. 
 */
void 
pgendStoreAuditKVPtimespec (PGBackend *be,
                                  store_data_t *ptr,
                                  sqlBuild_QType update);


/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPint64Only (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPdoubleOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPnumericOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPstringOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPguidOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine returns a positive int if the indicated object
 * differs from that in the SQL database.  It returns negative
 * number if theres an error.
 * It does not do any traversals, it does not lock.  
 */
int
pgendCompareOneKVPtimespecOnly (PGBackend *be, store_data_t *ptr);


/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPint64Only (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPdoubleOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPnumericOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPstringOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPguidOnly (PGBackend *be, store_data_t *ptr);

/* ------------------------------------------------------ */
/* This routine inserts or updates, as appropriate
 * It does not do any traversals, it does not lock.  
 * It just updates.
 */
void 
pgendPutOneKVPtimespecOnly (PGBackend *be, store_data_t *ptr);
