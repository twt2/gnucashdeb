Description: Fixes FTBFS on GNU/Hurd
 A buffer of fixed size PATH_MAX is created, but this constant is non-existent
 on GNU/Hurd, so the package FTBFS on that architecture.
 The fix consists in using a dynamically (re-)allocated buffer, as recommended
 on: http://www.gnu.org/software/hurd/hurd/porting/guidelines.html
Bug:         https://bugzilla.gnome.org/show_bug.cgi?id=668926
Bug-Debian:  http://bugs.debian.org/408583
Author:      SÃ©bastien Villemot <sebastien.villemot@ens.fr>
Last-Update: 2012-02-06
Applied-Upstream: commit: r21900
--- a/src/backend/xml/gnc-backend-xml.c
+++ b/src/backend/xml/gnc-backend-xml.c
@@ -108,8 +108,8 @@
 {
     struct stat statbuf;
 #ifndef G_OS_WIN32
-    char pathbuf[PATH_MAX];
-    char *path = NULL;
+    char *pathbuf = NULL, *path = NULL;
+    size_t pathbuf_size = 0;
 #endif
     int rc;
     QofBackendError be_err;
@@ -160,9 +160,16 @@
      */
 
 #ifndef G_OS_WIN32
+    pathbuf_size = strlen (be->lockfile) + 100;
+    pathbuf = (char *) malloc (pathbuf_size);
     strcpy (pathbuf, be->lockfile);
     path = strrchr (pathbuf, '.');
-    sprintf (path, ".%lx.%d.LNK", gethostid(), getpid());
+    while (snprintf (path, pathbuf_size - (path - pathbuf), ".%lx.%d.LNK", gethostid(), getpid())
+           >= pathbuf_size - (path - pathbuf))
+      {
+        pathbuf_size += 100;
+        pathbuf = (char *) realloc (pathbuf, pathbuf_size);
+      }
 
     rc = link (be->lockfile, pathbuf);
     if (rc)
@@ -178,12 +185,14 @@
            )
         {
             be->linkfile = NULL;
+            free (pathbuf);
             return TRUE;
         }
 
         /* Otherwise, something else is wrong. */
         qof_backend_set_error ((QofBackend*)be, ERR_BACKEND_LOCKED);
         g_unlink (pathbuf);
+        free (pathbuf);
         close (be->lockfd);
         g_unlink (be->lockfile);
         return FALSE;
@@ -197,6 +206,7 @@
         qof_backend_set_message ((QofBackend*)be, "Failed to stat lockfile %s",
                                  be->lockfile );
         g_unlink (pathbuf);
+        free (pathbuf);
         close (be->lockfd);
         g_unlink (be->lockfile);
         return FALSE;
@@ -206,12 +216,14 @@
     {
         qof_backend_set_error ((QofBackend*)be, ERR_BACKEND_LOCKED);
         g_unlink (pathbuf);
+        free (pathbuf);
         close (be->lockfd);
         g_unlink (be->lockfile);
         return FALSE;
     }
 
     be->linkfile = g_strdup (pathbuf);
+    free (pathbuf);
 
     return TRUE;
 
